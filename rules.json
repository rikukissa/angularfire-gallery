{
    "rules": {
        ".read": false,
        ".write": false,
        "users": {
          ".write": "auth != null",
          ".read": "auth != null && root.child('accepted_users').child(auth.id).exists()",
          "$userId": {
            ".write": "auth != null && !data.exists()",
            ".validate": "newData.hasChildren(['email', 'username']) && $userId === auth.id",
            "username": {
              ".validate": "newData.isString() && newData.val().length >= 4"
            }
          }
        },
        "files": {
          ".write": "auth != null && root.child('accepted_users').child(auth.id).exists()",
          ".read": "auth != null && root.child('accepted_users').child(auth.id).exists()",
          "$fileId": {
            ".write": "auth != null && (!data.exists() || auth.id == data.child('user_id').val())",
            ".validate": "newData.hasChildren(['user_id', 'link', 'file_type', 'timestamp', 'thumbnail', 'service']) && auth.id == newData.child('user_id').val()",
            "file_type": {
              ".validate": "newData.val() === 'video' || newData.val() === 'image'"
            },
            "service": {
              ".validate": "newData.val() === 'imgur' || newData.val() === 'youtube'"
            },
            "link": {
              ".validate": "newData.isString() && ((newData.parent().child('service').val() === 'youtube' && newData.val().contains('youtube.com')) || (newData.parent().child('service').val() === 'imgur' && newData.val().contains('imgur.com')))"
            },
            "thumbnail": {
              ".validate": "newData.isString() && ((newData.parent().child('service').val() === 'youtube' && newData.val().contains('youtube.com')) || (newData.parent().child('service').val() === 'imgur' && newData.val().contains('imgur.com')))"
            },
            "timestamp": {
              ".validate": "newData.val() === now"
            }
          }
        },
        "admin_users": {
          ".write": "auth != null && data.child(auth.id).exists()"
        },
        "accepted_users": {
          ".read": "auth != null && data.child(auth.id).exists()",
          ".write": "auth != null && data.child(auth.id).exists()"
        }
    }
}
